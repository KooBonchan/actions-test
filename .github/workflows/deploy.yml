name: Blue-Green deploy to GCP

on:
  push:
    branches:
      - release

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest
    - name: Deploy to GCP VM
      env:
        GCP_SSH_KEY: ${{ secrets.GCP_SSH_KEY }}
        VM_IP: ${{ secrets.GCP_VM_IP }}
        VM_USERNAME: ${{ secrets.GCP_VM_USERNAME }}
      run: |
          mkdir -p ~/.ssh
          echo "$GCP_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts
          ssh -o "StrictHostKeyChecking=no" "$VM_USERNAME@$VM_IP" << 'EOF'
            set -e
            echo "Starting deployment..."
          
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest
            ACTIVE=$(cat ~/active_container 2>/dev/null || echo "blue")
            if [ "$ACTIVE" = "green" ]; then
              NEW_CONTAINER="blue"
            else
              NEW_CONTAINER="green"
            fi
            docker rm -f "$NEW_CONTAINER" || true
            docker run -d --name $NEW_CONTAINER --network toy-network ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest
            # Update nginx default config directly in container
            docker exec nginxcontainer bash -c "cat > /etc/nginx/conf.d/default.conf" << 'NGINX'
            server {
              listen 80;
              server_name actions-test;
              location / {
                proxy_pass http://$NEW_CONTAINER:8094;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
              }
            }
            NGINX
            # Test and reload nginx
            docker exec nginxcontainer nginx -t
            if ! docker exec nginxcontainer nginx -s reload; then
              echo "Nginx reload failed!"
              exit 1
            fi
            echo "$NEW_CONTAINER" > ~/active_container
            echo "Deployment completed successfully"
          EOF
