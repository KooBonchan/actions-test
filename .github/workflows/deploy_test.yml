name: Blue-Green Deployment

on:
  push:
    branches:
      - test

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest

    - name: Deploy to GCP VM
      env:
        GCP_SSH_KEY: ${{ secrets.GCP_SSH_KEY }}
        VM_IP: ${{ secrets.GCP_VM_IP }}
        VM_USERNAME: ${{ secrets.GCP_VM_USERNAME }}
      run: |
          mkdir -p ~/.ssh
          echo "$GCP_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts
          ssh "$VM_USERNAME@$VM_IP" << 'EOF'
          
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest

            # Check current active container from nginx.conf
            ACTIVE=$(docker exec nginxcontainer cat /etc/nginx/conf.d/default.conf | grep proxy_pass | grep -o "blue\|green")
            if [ "$ACTIVE" = "green" ]; then
              NEW_CONTAINER="blue"
            else
              NEW_CONTAINER="green"
            fi

            # Stop and remove idle container
            docker stop $NEW_CONTAINER || true
            docker rm $NEW_CONTAINER || true

            # Run new container
            docker run -d --name $NEW_CONTAINER --network toy-network ${{ secrets.DOCKERHUB_USERNAME }}/toy:latest

            # Update nginx.conf
            echo "server { listen 80; server_name actions-test; location / { proxy_pass http://$NEW_CONTAINER:8094; proxy_set_header Host \$host; proxy_set_header X-Real-IP \$remote_addr; } }" > ~/nginx.conf

            # Copy updated config to nginx container
            docker cp ~/nginx.conf nginxcontainer:/etc/nginx/conf.d/default.conf

            # Reload nginx
            docker exec nginxcontainer nginx -s reload
          EOF
